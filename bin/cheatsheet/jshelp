
Node.js is a very powerful JavaScript-based framework/platform built on Google Chrome's JavaScript V8 Engine. 

## multi-paradigm, dynamic language 

    with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — 
    many structures from those languages apply to JavaScript as well 
    
## object prototype 

    JavaScript supports object-oriented programming with object prototypes, instead of classes (see more about prototypical inheritance and ES2015 classes). 
    JavaScript also supports functional programming — because they are objects, functions may be stored in variables and passed around like any other object.

## input and output

    Unlike most programming languages, the JavaScript language has no concept of input or output. It is designed to run as a 
    scripting language in a host environment, and it is up to the host environment to provide mechanisms for communicating 
    with the outside world. The most common host environment is the browser. Server-side environments such as Node.js. 

## Custom objects 
 
     In OOP, objects are collections of data and methods that operate on that data. JS is prototype-based language that contains no class statement.
     Instead, JavaScript uses functions as classes.
 
         function makePerson(first, last) {
           return {
             first: first,
             last: last,
             fullName: function() {
                 return this.first + ' ' + this.last;
             },
             fullNameReversed: function() {
                 return this.last + ', ' + this.first;
             }
           };
         }
     
         var s = makePerson('Simon', 'Willison');
         s.fullName(); // "Simon Willison"
         s.fullNameReversed(); // "Willison, Simon"

## Prototype - object shared by all instances  

    # Person.prototype is an object shared by all instances of Person. It forms part of a lookup chain (that has a special name, "prototype chain"): 
    any time you attempt to access a property of Person that isn't set, JavaScript will check Person.prototype to see if that property exists there instead.

        function Person(first, last) {
            this.first = first;
            this.last = last;
        }

        Person.prototype.fullName = function() {
            return this.first + ' ' + this.last;
        };
        Person.prototype.fullNameReversed = function() {
            return this.last + ', ' + this.first;
        };
    
    # JavaScript lets you modify something's prototype at any time in your program, which means you can add extra methods to existing objects at runtime:

        var s = new Person('Simon', 'Willison');
        s.firstNameCaps(); // TypeError on line 1: s.firstNameCaps is not a function

        Person.prototype.firstNameCaps = function() {
            return this.first.toUpperCase();
        };
        s.firstNameCaps(); // "SIMON"

## inner function 

    JavaScript function declarations are allowed inside other functions. An important detail of nested functions in JavaScript is that 
    they can access variables in their parent function's scope. 

        function parentFunc() {
            var a = 1;

            function nestedFunc() {
                var b = 4; // parentFunc can't use this
                return a + b; 
            }
            return nestedFunc(); // 5
        }


## Closures 

    one of the most powerful abstractions of JavaScript. Whenever JavaScript executes a function, a 'scope' object is created to hold the 
    local variables created within that function. Scope objects form a chain called the scope chain, similar to the prototype chain used 
    by JavaScript's object system.


        function makeAdder(a) {
            return function(b) {
                return a + b;
            };
        }
        var add5 = makeAdder(5);
        var add20 = makeAdder(20);
        add5(6); // ?
        add20(7); // ?

## Callbacks 

    Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks.  
    a function to read a file. So there is no blocking or wait for File I/O. This makes Node.js highly scalable,
    as it can process a high number of requests without waiting for any function to return results. 

    var fs = require("fs");
    // var data = fs.readFileSync('input.txt');     // potential blocking call
    fs.readFile('input.txt', function (err, data) { // callback function with data, err handling 
        if (err) return console.error(err);
          console.log(data.toString());
    });

    console.log("Program Ended");

## Event Loop 

    - Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. 
    - Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency.
    - Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding 
      event which signals the event-listener function to execute. 

    # Event-Driven Programming

    The functions that listen to events act as Observers. 
    Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows. 
    
    var events = require('events') 
    var eventEmitter = new events.EventEmitter();

    // bind an event handler with an event 
    eventEmitter.on('eventName', eventHandler); 

    // Fire an event
    eventEmitter.emit('eventName');

## EventEmitter Class 

    All objects which emit events are the instances of events.EventEmitter.
    
    var events = require('events');     // Import events module
    var eventEmitter = new events.EventEmitter();       // Create an eventEmitter object
   
    // listener #1
    var listner1 = function listner1() {
        console.log('listner1 executed.');
    }
    // Bind the connection event with the listner1 function
    eventEmitter.addListener('connection', listner1); 

## Multiprocess  

    Node.js runs in a single-thread mode, but it uses an event-driven paradigm to handle concurrency. It also facilitates creation of 
    child processes to leverage parallel processing on multi-core CPU based systems. 

    Child processes always have three streams child.stdin, child.stdout, and child.stderr which may be shared with the stdio streams of the parent process.
    
        exec − child_process.exec method runs a command in a shell/console and buffers the output.
        spawn − child_process.spawn launches a new process with a given command.
        fork − The child_process.fork method is a special case of the spawn() to create child processes.

        child_process.exec(command[, options], callback) 

        const fs = require('fs');
        const child_process = require('child_process');
        var workerProcess = child_process.exec('node support.js '+i,function (error, stdout, stderr) {
            ...
        }

## Global Objects 

    Node.js global objects are global in nature and they are available in all modules. 
    
    __filename, __dirname,  

    console.log( __filename ); 

    setTimeout(cb, ms) 
    clearTimeout(t) 
    setInterval(cb, ms) 
    clearInterval(t). 

## File System 

    Node implements File I/O using simple wrappers around standard POSIX functions. 

    var fs = require("fs") 

    # Synchronous vs Asynchronous 

    every method in fs module has synchronous as well as asynchronous forms.  Asynchronous methods take the last parameter as the completion function 
    callback and the first parameter of the callback function as error. 
    
    var fs = fs.open('input.txt', 'r+', function(err, fd) {
        if (err) {
            return console.error(err);
        }
        console.log("File opened successfully!");
    });

## Utility Modules 

    OS, Path, Net, DNS, Domain 

## Web Server 

    - Web Server is a software application which handles HTTP requests sent by the HTTP client, like web browsers, 
    - and returns web pages in response to the clients.  Web servers usually deliver html documents along with images, style sheets, and scripts.
    - server-side scripts, using scripting languages or redirecting the task to an application server which retrieves data from a database

    # Creating a Web Server using Node

        var http = require('http'); 
        http.createServer( function (request, response) {..}).listen(8001);

    # Creating Web client using Node 

        var http = require('http');
        // Options to be used by request 
        var options = {
            host: 'localhost',
            port: '8081',
            path: '/index.htm'  
        };
        var callback = function(response) { };
        var req = http.request(options, callback);
        req.end();

    
