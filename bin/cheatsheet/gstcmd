## Installation/build

	# Linux
	https://gstreamer.freedesktop.org/documentation/installing/on-linux.html?gi-language=c

	# Windows
	https://gstreamer.freedesktop.org/documentation/installing/on-windows.html?gi-language=c

## Capture and Encode Pipeline

	gst-launch-1.0 dshowvideosrc device-name="OV02C10" ! videoconvert !  videoscale ! \
	video/x-raw,width=1280,height=720 !  nvh264enc ! rtph264pay ! dpsink host=localhost port=5000

	# Ensure formats (like I420) and adding queues to help dataflow and buffering
	gst-launch-1.0 dshowvideosrc device-name="OV02C10" ! queue ! videoconvert ! queue \
    ! videoscale ! queue ! video/x-raw,width=1280,height=720,format=I420 ! queue ! nvh264enc ! \
	queue ! rtph264pay ! queue ! udpsink host=remote_host_ip port=5000

	# bypass UDP/RTP, only use TCP
	gst-launch-1.0 dshowvideosrc device-name="OV02C10" ! videoconvert ! videoscale ! video/x-raw,width=1280,height=720 ! \
    nvh264enc ! h264parse ! queue ! matroskamux ! tcpserversink host=localhost port=5000

	# bypass TCP, only use local shared mem (need gstreamer-sharp plugin)
	gst-launch-1.0 dshowvideosrc device-name="OV02C10" ! videoconvert ! videoscale ! video/x-raw,width=1280,height=720 !  \
	nvh264enc ! h264parse ! queue ! shmsink socket-path=/tmp/gst_shm_socket sync=true wait-for-connection=false

	# use appsink 
	gst-launch-1.0 dshowvideosrc device-name="OV02C10" ! videoconvert ! videoscale ! video/x-raw,width=1280,height=720 !  \
    nvh264enc ! queue ! h264parse ! appsink name=video_sink


## Receive and Decode Pipeline
	gst-launch-1.0 udpsrc port=5000 ! application/x-rtp, payload=96 ! rtph264depay ! nvh264dec ! videoconvert ! autovideosink

	gst-launch-1.0 udpsrc port=5000 ! queue ! application/x-rtp, payload=96 ! queue ! rtph264depay ! queue ! nvh264dec ! queue ! videoconvert ! queue ! d3dvideosink

	# byass UDP/RTP, only use TCP
	gst-launch-1.0 tcpclientsrc host=localhost port=5000 ! matroskademux ! h264parse ! nvh264dec ! videoconvert ! d3dvideosink

	# Use local shared memory
	gst-launch-1.0 shmsrc socket-path=/tmp/gst_shm_socket !  h264parse ! nvh264dec ! videoconvert ! d3dvideosink

	# Use appsrc
	gst-launch-1.0 appsrc name=video_src ! h264parse ! nvh264dec ! videoconvert ! d3dvideosink


## Turn on debug on GStreamer output
	GST_DEBUG=3 gst-launch-1.0 udpsrc port=5000 ! application/x-rtp, payload=96 ! rtph264depay ! nvh264dec ! videoconvert ! d3dvideosink
 	GST_DEBUG=3,*xvimagesink*:5 gst-launch-1.0
 
## Install gst plugin on Linux
	sudo apt-get install gstreamer1.0-plugins-bad
	sudo apt install gstreamer1.0-libav

## Quick test local video Capture and Playback
 	gst-launch-1.0 dshowvideosrc ! videoconvert ! d3dvideosink
	gst-launch-1.0 videotestsrc pattern=11 ! videoconvert ! autovideosink
	gst-launch-1.0 -v v4l2src device=/dev/video0 ! video/x-raw,format=YUY2,width=1280,height=720,framerate=10/1 ! queue ! xvimagesink

## Verify the gstreamer plugin is available 
 	gst-inspect-1.0 dshowvideosrc

## GStreamer tools
	https://gstreamer.freedesktop.org/documentation/tutorials/basic/gstreamer-tools.html?gi-language=c
	"gst-launch-1.0"
		- accepts a textual description of a pipeline, instantiates it, and sets it to the PLAYING state. 
		- primarily a debugging tool for developers. 
		- 
	gst-launch-1.0 dshowvideosrc ! videoconvert ! d3dvideosink
	gst-launch-1.0 videotestsrc pattern=11 ! videoconvert ! autovideosink
	gst-launch-1.0 videotestsrc ! videoconvert ! tee name=t ! queue ! autovideosink t. ! queue ! autovideosink 
 	
	"gst-inspect-1.0"
		- lists all available elements types
		- gst-inspect-1.0 vp8dec
		- 	
	"gst-discoverer-1.0"
		- gst-discoverer-1.0 https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm -v
	gst-inspect-1.0 vp8dec 

	"./gst-device-monitor-1.0.exe Video/Source" 
		- probe gst devices for Video

## gstreamer plugins 

	"nvvidconv" - is used for video conversion and scaling on NVIDIA GPUs.  It can be used to convert video formats,  
			    resize videos and performs other video processing tasks. 

	"nvv4l2h264enc" - leverages the Video4Linux2 (V4L2) API to access the hardware encoder capabilities of NVIDIA GPUs.
				commonly used for real-time video encoding tasks with low latency and high efficiency.
	  
## h264 encoder caps conf

	gst-launch-1.0 videotestsrc ! nvvidconv ! nvv4l2h264enc maxperf-enable=true insert-sps-pps=1 !  h264parse ! rtph264pay ! udpsink host=10.0.0.2 port=9560	

## fpssink to measure/display video fps

	! fpsdisplaysink video-sink=autovideosink text-overlay=true
	gst-launch-1.0 videotestsrc ! video/x-raw,framerate=60/1 ! fpsdisplaysink video-sink=autovideosink text-overlay=true	
		 
