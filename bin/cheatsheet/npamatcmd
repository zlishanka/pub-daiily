## numpy, pandas, matplotlib 

## numpy 
	- Fast powerful and easy to use library for working with arrays big and small 
	- Has suupport for N-dimensional arrays
	- Useful for working with a large majority of data science tools like pandas, tensorflow

	# createing Arrays
	
	a = np.array([1,2,3])
	b = np.array([(1.5,2,3), (4,5,6)], dtype = float)
	c = np.array([[(1.5,2,3), (4,5,6)], [(3,2,1), (4,5,6)]], dtype = float)

	# Initial placeholders 

	a = np.zeros((3,4))
	b = np.ones((2,3,4),dtype=np.int16)
	d = np.arange(10,25,5) 		# create array evenly
	e = np.linspace(0,2,9) 		# create array evenly spaced
	f = np.full((2,2),7)		# create a constant array
	g = np.eye(2) 				# create 2x2 identity matrix
	h = np.random.random((2,2)) 	# create arrays with random variables
	j = np.empty((3,2)) 		# empty array 

	# Data Types

	np.int64, np.float32, np.complex, np.bool, np.object, 
	np.string_ 		; fixed length string type
	np.unicode_		; fixed length unicode type

	# I/O

		# Saving and loading on Disk

		np.save('my_array', a)
		np.savez('array.npz', a, b)
		np.load('my_array.npy')

		# Saving & loading text files 

		np.loadtxt("myfile.txt")
		np.genfromtxt("my_file.csv", delimiter=',')
		np.savetxt("myarray.txt", a, delimiter=" ")

	# Inpecting your array

		a.shape
		len(a)
		b.ndim 		# number of array dimensions 
		e.size  	# number of array elements
		b.dtype		# data type of array elements
		b.dtype.name	# name of data type
		b.astype(int) 	# convert array to  a differrent type

	# Ask for help
		np.info(np.ndarray.dtype)

	# Array Mathematics
		
		g = a - b
		np.substract(a,b)
		g = b + a
		np.add(a,b)
		a/b, np.divide(a,b) 
		a*b , np.multiply(a,b) 
		np.exp(b) 
		np.sqrt(b)
		np.sin(a)
		f1.dot(f)   	# f1 dot f 
	
	# Comparison

		a == b 			# Element wise comparison
		a > 2 			# Element wise
		np.array_equal(a, b) 	# array wise comparison 
	
	# Aggregate functions 

		a.sum() 		# Array-wise sum
		a.min()			# Array-wise minimum value 
		b.max(axis=0)	# Maximum value of an array ro
		b.cumsum(axis=1)  # Cumulative sum of the elements 
		a.mean() 		# mean 
		np.median(b)	# median
		a.corrcoef()	# Correlation coefficients
		np.std(b) 		# Standard deviation

	# Copying Arrays
		h = a.view() 	# create view of the array with the same data
		np.copy(a) 		# deep copy
		h = a.copy() 	# create deep copy of a	
	# Sorting 
		a.sort()
		c.sort(axis=0)  # Sort the elements of an array's axis

	# Subsetting, Slicing, indexing 

		a[0:2] 
		b[0:2,1] 		# Select items at rows 0 and 1 in column 1
		c[1,...] 		# same as [1,:,:]

	# boolean index 
		b[b<2] 			# select element from a less than 2

	# Array manipulation
		a = np.transpose(b)
		a.T 

	# Chamging array shape
		b.ravel() 		# flatten the array
	
	# adding 
