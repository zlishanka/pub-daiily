
https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript

# Variables 
    
    let, const, var

    let -  allows you to declare block-level variables.
    const - allows you to declare variables whose values are never intended to change
    var - the most common declarative keyword. It does not have the restrictions that the other two keywords have.
            If you declare a variable without assigning any value to it, its type is undefined.

# null,  undefined 

    null, a value that indicates a deliberate non-value (and is only accessible through the null keyword), 
    
    undefined, 
        (1) a value of type undefined that indicates an uninitialized variable — that is, a value hasn't even been assigned yet.
        (2) undefined is actually a constant 

# Objects 

    Objects can be thought of as simple collections of name-value pairs 
    similar to 
        - Dictionaries in Python 
        - Hashes in Perl and Ruby 
        - HashMap in Java 

    - two basic ways to create an empty object:
    
        var obj = new Object(); 
        var obj = {}; 

    - Attribute access can be chained together:
    
        obj.details.color; // orange
        obj['details']['size']; // 12

# Arrays 

    Arrays in JavaScript are actually a special type of object.

    a.toString() - 
    a.pop()             - remove and returns the last item 
    a.push(item1,...)   - append at the end
    a.shift()           - removes and returns the first item
    a.slice(start,[,end])   - return subarray 

# Custom objects 

    In OOP, objects are collections of data and methods that operate on that data. JS is prototype-based language. 
    Instead, JavaScript uses functions as classes. 

    function makePerson(first, last) {
      return {
        first: first,
        last: last,
        fullName: function() {
            return this.first + ' ' + this.last;
        },
        fullNameReversed: function() {
            return this.last + ', ' + this.first;
        }
      };
    }

    var s = makePerson('Simon', 'Willison');
    s.fullName(); // "Simon Willison"
    s.fullNameReversed(); // "Willison, Simon"

# Prototype Inheritance  

    # All JavaScript objects inherit properties and methods from a prototype. 

    function Person(first, last, age, eyecolor) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eyecolor;
    }

    # The JavaScript prototype property also allows you to add new methods to objects constructors:
    Person.prototype.name = function() {
        return this.firstName + " " + this.lastName;
    };
    
# Class  
    https://www.w3schools.com/js/js_classes.asp 

    (1) ES6, also known as ECMAScript2015, introduced classes.
    (2) Use the keyword class to create a class, and always add the constructor() method. 

    class Car {
      constructor(brand) {
          this.carname = brand;
      }
    }
    mycar = new Car("Ford");


#  Function.prototype.bind() 
        https://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/# 

     keep the context of “this” within another function, then you might not realize that what you actually need is Function.prototype.bind() 

     We use the Bind () method primarily to call a function with the this value set explicitly. It other words, bind () allows us to easily 
     set which specific object will be bound to this when a function or method is invoked.

     $ ("button").click (user.clickHandler.bind (user));        // bind clickHandler method to the user object  


# 
