# Online 
	https://github.com/iamshaunjp/typescript-masterclass

# Typescript 
 	- Superset of javaScript 
	- Allow to use strict types
	- Supports modern features (arrow function, let, const)
	- Extra feature (generics, interfaces, tuples, etc)
	- Just like JavaScript, with extra type annotations 
 
	# Benefits
		- better error feedback
		- better autocompletion & codee hints
		- custom types (i.e., "interface")
		- self documented
  
# Installation
	npm install -g typecript 

# Compilation
	tsc index.ts
	tsc --init  	# Create config JSON
	tsc --watch 	# keep compiler running in the background and watch file changes
	node --watch index.js 	# run node automatically

# data types
	let names: string[] = ['mario', 'juan', 'lucas', 'bob']
	let ages: number[] = [31, 35, 45, 47]	

	let fruits = ['apple', 'orange', 'banana', 'peach'] # type infer as string
	let x: any = 42; x = 'hello'; x = true; x = 34 	# any type
	let title 	# any type 

# object literals
	let user: {firstName: string, age: number, id: number} = {'john', 30, 123}
	let person =  {name: 'john', score: 35}

# functions
	function addTwoNumbers(a: number, b: number): number { return a + b }
	const subtractTwoNumbers = (a: number, b: number): number => { return a - b }
	function greet(name) { return `Hello, ${name}!`; } # return type inference 	

# interfaces
	interface Author {
		name: string,
		avatar: String
	}
	const authorOne: Author = {name: 'mario', avatar:'/img/mario.png'}
	interface Post {
		title: string, 
		body: string, 
		tags: string[],
		createdAt: Date,
		author: Author
	}

