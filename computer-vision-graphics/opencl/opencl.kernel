# OpenCL Kernel 

	https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/programming_opencl_kernels.md	

	- An OpenCL application is split into host code and device kernel code
	- Host code 
		- Typically written using a general programming language such as C or C++ and compiled by a conventional compiler, or python binding 
		- For execution on the host CPU 

	## Device kernel 
		- Device kernels that are written in OpenCL C, which is based on C99 
		- can be ingested and compiled by the OpenCL driver
		- OpenCL C is a subset of ISO C99 with language extensions for parallelism
		- well-defined numerical accuracy
		- a rich set of built-in functions including cross, dot, sin, cos, pow, log etc.

		- Sample kernel code 

		__kernel void vector_add(__global const int *A, __global const int *B, __global int *C) {
	 
		// Get the index of the current element to be processed
		int i = get_global_id(0);
	 
		// Do the operation
		C[i] = A[i] + B[i];
	}
	## Host program 

		### Create an OpenCL context
			cl_context context = clCreateContext( NULL, 1, &device_id, NULL, NULL, &ret);

		### Create a command queue
			cl_command_queue command_queue = clCreateCommandQueue(context, device_id, 0, &ret);

		### Create memory buffers on the device for each vector 
			cl_mem a_mem_obj = clCreateBuffer(context, CL_MEM_READ_ONLY, 
				LIST_SIZE * sizeof(int), NULL, &ret); 

		### Create memory buffers on the device for each vector 
			cl_mem a_mem_obj = clCreateBuffer(context, CL_MEM_READ_ONLY, 
				LIST_SIZE * sizeof(int), NULL, &ret);

		### Create a program from the kernel source
			cl_program program = clCreateProgramWithSource(context, 1, 
				(const char **)&source_str, (const size_t *)&source_size, &ret);

		### Build the program
			ret = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);
	 
		### Create the OpenCL kernel
			cl_kernel kernel = clCreateKernel(program, "vector_add", &ret);
	 
		### Set the arguments of the kernel 
		### Execute the OpenCL kernel on the list
			size_t global_item_size = LIST_SIZE; // Process the entire lists
			size_t local_item_size = 64; // Divide work items into groups of 64
			ret = clEnqueueNDRangeKernel(command_queue, kernel, 1, NULL, 
				&global_item_size, &local_item_size, 0, NULL, NULL);

		### Read the memory buffer C on the device to the local variable C
			int *C = (int*)malloc(sizeof(int)*LIST_SIZE);
			ret = clEnqueueReadBuffer(command_queue, c_mem_obj, CL_TRUE, 0, 
				LIST_SIZE * sizeof(int), C, 0, NULL, NULL);

		### // Clean up
			ret = clFlush(command_queue);
			ret = clFinish(command_queue);
			ret = clReleaseKernel(kernel);
			ret = clReleaseProgram(program);
			ret = clReleaseMemObject(a_mem_obj);
			ret = clReleaseMemObject(b_mem_obj);
			ret = clReleaseMemObject(c_mem_obj);
			ret = clReleaseCommandQueue(command_queue);
			ret = clReleaseContext(context);
