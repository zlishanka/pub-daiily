## Cmakefile introduction 


    # What is Cmakefile 

        - Cmake is cross-platform, open-source build system for managing the build process of software using a compiler-independent method. 
        - In most cases it is used to generate project/make files - in your example it has produced Makefile which are used to build your software 

    # What is behind the scenes of CMakefiles.txt 

        https://stackoverflow.com/questions/17525153/how-exactly-does-cmake-work 

        https://gitlab.kitware.com/cmake/community/-/wikis/FAQ#what-is-cmake 
        
    # Learning cmake  

        http://www.elpauer.org/stuff/learning_cmake.pdf 


    # CMakefile example 

        cmake_minimum_required(VERSION 3.18)

        project(ImageProcessing)
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        #set(CMAKE_CXX_FLAGS "-O3 -DNDEBUG -DWITH_OPENCL=ON -DWITH_GSTREAMER=ON")
        set(CMAKE_CXX_FLAGS "-O3 -DNDEBUG -DWITH_OPENCL=ON -DWITH_IPP=ON")
        set(THREADS_PREFER_PTHREAD_FLAG ON)

        #set(GLX_INCLUDE_DIR /opt/X11/include)

        find_package( OpenCV REQUIRED)
        find_package( OpenCL REQUIRED)
        find_package( Threads REQUIRED)

        find_package(PkgConfig)
        pkg_check_modules(PC_ZeroMQ QUIET zmq)

        find_path(ZeroMQ_INCLUDE_DIR
                NAMES zmq.hpp
                PATHS ${PC_ZeroMQ_INCLUDE_DIRS}
                )

        find_library(ZeroMQ_LIBRARY
                NAMES zmq
                PATHS ${PC_ZeroMQ_LIBRARY_DIRS}
                )

        set(FFMPEG_PATH "/usr/local/Cellar/ffmpeg/4.4_2")
        set(FFMPEG_INCLUDE_DIRS "${FFMPEG_PATH}/include")
        set(FFMPEG_LIBRARIES "-L${FFMPEG_PATH}/lib -lavcodec -lavformat -lpostproc -lavdevice -lavresample -lswresample -lavfilter -lavutil -lswscale -lbz2")

        set(AVAIL_ROOT ../..)
        set(VIRCAM_SRC ${AVAIL_ROOT}/VirtualCamera/MacCamera/OBSCamera.cpp)


        add_executable( imtile main_imagetile.cpp ../src/ImageAutoCrop.cpp ../src/ImageTile.cpp ../src/ImageTileGenerator.cpp ../src/ImageMontage.cpp ../../Utils/NanoMsgImageTransfer.cpp ImageMontageApp.cpp  ../../Utils/ImageTransfer.cpp ${VIRCAM_SRC})
        target_compile_definitions( imtile PUBLIC QZMQ)
        include_directories( imtile ${OpenCV_INCLUDE_DIRS} ${FFMPEG_INCLUDE_DIRS} ${ZeroMQ_INCLUDE_DIR} ${AVAIL_ROOT} /usr/local/include )
        target_link_libraries( imtile ${OpenCV_LIBS} ${FFMPEG_LIBRARIES} ${ZeroMQ_LIBRARY} -L/usr/local/lib -lnanomsg)

        add_executable( vplayer vplayer.cpp ../../Utils/NanoMsgImageTransfer.cpp ../../Utils/ImageTransfer.cpp ${VIRCAM_SRC})
        target_compile_definitions( vplayer PUBLIC QNMSG)
        include_directories( vplayer ${OpenCV_INCLUDE_DIRS} ${FFMPEG_INCLUDE_DIRS} ${ZeroMQ_INCLUDE_DIR} ${AVAIL_ROOT} /usr/local/include )
        target_link_libraries( vplayer ${OpenCV_LIBS} ${FFMPEG_LIBRARIES} ${ZeroMQ_LIBRARY} -L/usr/local/lib -lnanomsg)

        add_executable( imcrop main_imageautocrop.cpp ../src/ImageAutoCrop.cpp )
        include_directories( imcrop ${OpenCV_INCLUDE_DIRS} ${GTEST_INCLUDE_DIR} ../include)
        target_link_libraries( imcrop ${OpenCV_LIBS} ${GTEST_LIBRARY})           


    # Build static library 

        cmake_minimum_required(VERSION 3.14)
project(OpenCVTest)
set(CMAKE_CXX_STANDARD 14)
find_package(OpenCV REQUIRED)
set(OpenCV_SHARED OFF)
message(NOTICE ${OpenCV_LIBS})
find_package(Qt5Gui REQUIRED)
find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Test REQUIRED)
find_package(Qt5Concurrent REQUIRED)
find_package(Qt5OpenGL REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Boost REQUIRED)
link_libraries(jpeg.a "-static")
include_directories(${OpenCV_INCLUDE_DIRS})
link_libraries(${OpenCV_LIBS} "-static")
link_libraries(${Qt5Gui_LIBS} "-static")
link_libraries(${Qt5Core_LIBS} "-static")
link_libraries(${Qt5Widgets_LIBS} "-static")
link_libraries(${Qt5Test_LIBS} "-static")
link_libraries(${Qt5Concurrent_LIBS} "-static")
link_libraries(${Qt5OpenGL_LIBS} "-static")
link_libraries(${Eigen3_LIBS} "-static")
link_libraries(${Boost_LIBS} "-static") 
